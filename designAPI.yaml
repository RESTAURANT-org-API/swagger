openapi: 3.0.3
info:
  title: Restaurant Project ~ API Swagger - 3.0
  description: |-
    This is a sample restaurant store - project with server based on the OpenAPI 3.0 specification of swagger

    _If you're looking for the github organization for the following code updates, then click [here](https://github.com/RESTAURANT-org-API). Alternatively, you can load via the [`Github > Swagger OAS 3.0`](https://github.com/RESTAURANT-org-API/swagger) menu option!_
    

  termsOfService: http://swagger.io/terms/
  contact:
    email: clinto.abraham@srijan.net
  license:
    name: Eclipse Public License - v 2.0
    url: https://www.eclipse.org/legal/epl-2.0/
  version: 1.0.11
externalDocs:
  description: Find out more about restaurant project at github codebase
  url: https://github.com/RESTAURANT-org-API/
servers:
  - url: http://localhost:5000/api/v3
tags:
  - name: user
    description: Everything about your users
    externalDocs:
      description: Find out more about our users
      url: http://swagger.io
      
  - name: admin
    description: Operations about admin
    
  - name: kitchen
    description: Access to kitchen orders
    externalDocs:
      description: Find out more about our kitchen
      url: http://swagger.io
      
  - name: staff
    description: Access to staff management api
    externalDocs:
      description: Find out more about our staff
      url: http://wedding-days.io
    
  - name: store
    description: Access to store management api
    externalDocs:
      description: Find out more about our store
      url: http://wedding-days.io
      
  - name: graph
    description: Access to graph management api
    externalDocs:
      description: Find out more about our graphical representation
      url: http://wedding-days.io
      
paths:
  /user/login:
    post:
      tags:
        - user
      summary: Authenicate user with username & password
      description: Add a new user to the restaurant
      operationId: addUser
      requestBody:
        description: Create a new user in the restaurant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user
            
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  /admin/create/user:
    post:
      tags:
        - admin
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
                
  /admin/{username}:
    get:
      tags:
        - admin
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - admin
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - admin
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
  /admin/create/foodItem:
    post:
      tags:
        - admin
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createFoodItemId
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
          application/xml:
            schema:
              $ref: '#/components/schemas/Inventory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
            application/xml:
              schema:
                $ref: '#/components/schemas/Inventory'
  /admin/findFoodByStatus:
    get:
      tags:
        - admin
      summary: Finds food by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findFoodByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
              - expired
              - wasted
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid status value
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user
  /staff/create/customer:
    post:
      tags:
        - staff
      summary: Create customer
      description: This can only be done by the logged-in staff.
      operationId: createCustomer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
               
  /staff/create/order:
    post:
      tags:
        - staff
      summary: Create order
      description: This can only be done by the logged-in staff.
      operationId: createOrder
      requestBody:
        description: Created order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                  $ref: '#/components/schemas/Order'
                  
  /staff/addToTrash:
    post:
      tags:
        - staff
      summary: Create order
      description: This can only be done by the logged-in staff.
      operationId: trashID
      requestBody:
        description: Trash object pushed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trash'
          application/xml:
            schema:
              $ref: '#/components/schemas/Trash'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Trash'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Trash'
            application/xml:
              schema:
                  $ref: '#/components/schemas/Trash'
                
  /staff/findAllOrders:
    get:
      tags:
        - staff
      summary: Finds order by orderID
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findAllOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid tag value
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user
            
  /staff/findBy/{orderID}:
    get:
      tags:
        - staff
      summary: Finds order by orderID
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findOrderByID
      parameters:
        - name: orderID
          in: path
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid tag value
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user
            
  /kitchen/{KOT}:
    post:
      tags:
        - kitchen
      summary: Updates a store item in the store with form data
      description: ''
      operationId: updateStoreWithForm
      parameters:
        - name: KOT
          in: path
          description: ID of inventory that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of inventory that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of inventory that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user
    patch:
      tags:
        - kitchen
      summary: Patch order status 
      description: Patch order status to either packing, inProgress, availableForDelivery, outForDelivery
      operationId: patchKOTid
      parameters:
        - name: KOT
          in: path
          description: Status values that need to be considered for filter remaining KOT 
          required: true
          explode: true
          schema:
            type: string
            default: pickedToCook
            enum:
              - todaysKOT
              - pickedToCook
              - futureKOT
              - inProgressCooking
              - packing
              - finishedPacking
              - outForDelivery
      responses:
        '400':
          description: Invalid kot value
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user
    get:
      tags:
        - kitchen
      summary: Find order by ID
      description: Returns a single order
      operationId: getKOTById
      parameters:
        - name: KOT
          in: path
          description: ID of KOT to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: KOT not found
      security:
        - api_key: []
        - restaurant_store_auth:
            - write:user
            - read:user

  /store/inventoryStatus:
    get:
      tags:
        - store
      summary: Returns inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventoryStatus
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/trashInventory:
    post:
      tags:
        - store
      summary: Trash an item
      description: Place the trash items in the store
      operationId: disposeInventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
          application/xml:
            schema:
              $ref: '#/components/schemas/Inventory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /graph/sales:
    get:
      tags:
        - graph
      summary: Returns sales detailed object
      description: ''
      operationId: viewSalesGraphID
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sales'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Sales'
        '400':
          description: Invalid schema requested
        '404':
          description: Inventory not found
      security:
        - api_key: []
  /store/inventory:
    get:
      tags:
        - graph
      summary: Returns inventories detailed object
      description: Returns a map of status codes to quantities
      operationId: viewInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid schema requested
        '404':
          description: Inventory not found
      security:
        - api_key: []
  /store/trash:
    get:
      tags:
        - graph
      summary: Returns trash detailed object
      description: Returns a map of status codes to quantities
      operationId: viewTrash
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid schema requested
        '404':
          description: Inventory not found
      security:
        - api_key: []
        
components:
  schemas:
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        password:
          type: string
          example: '12345'
        userStatus:
          type: string
          description: User Status could be active employee, ex-employee
          example: 'active'
        employmentType:
          type: string
          description: 'Either service staff, or kitchen staff else admin'
          example: kitchen
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
      xml:
        name: user
    
    Inventory:
      required:
        - name
        - expiry
        - type
      type: object
      properties:
        itemID:
          type: integer
          format: int64
          example: 10
        cost:
          type: integer
          format: int64
          example: 20
        itemName:
          type: string
          example: paneer
        quantityType:
          type: string
          default: Kilogram
          enum: 
            - Kilogram
            - Litre
        quantity:
          type: integer
          format: int32
          example: 10
        itemType:
          type: string
          enum: 
            - liquid perishable
            - solid perishable
            - viscous perishable
        expiry:
          type: object
          properties:
            month:
              type: string
              example: May
            weeks:
              type: integer
              example: 2
            days:
              type: integer
              example: 28
            date:
              type: string
              example: 28-05-2023
        status:
          type: string
          description: food item status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: category
        
    Order:
      type: object
      properties:
        orderID:
          type: integer
          format: int64
          example: 10
        itemId:
          $ref: '#/components/schemas/Inventory'
        quantity:
          type: integer
          format: int32
          example: 10
        cost:
          type: integer
          format: int32
          example: 70
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - coolingPeriod
            - inProgress
            - packed
            - delivered
      xml:
        name: order
        
    Sales:
      type: object
      properties:
        orderID:
          $ref: '#/components/schemas/Order'
        itemId:
          $ref: '#/components/schemas/Inventory'
        paymentStatus:
          type: string
          example: inProgress
          enum:
            - inProgress
            - failed
            - completed
            - networkError
            - reAttempt
        modeOfPayment:
          type: string
          example: phonePe
          enum:
            - phonePe
            - paytm
            - GooglePay
            - CreditCard
            - IMPS
            - bankCard
            - internetBanking
            - neft
            - cash
        shipDate:
          type: string
          format: date-time
          example: "Tue Mar 28 2023 20:11:49 GMT+0530 (India Standard Time)"
        totalCost:
          type: integer
          description: Cost of item
          example: 700
        customer:
          $ref: '#/components/schemas/Customer'
      xml:
        name: sales
    
    Trash:
      type: object
      properties:
        trashID:
          type: integer
          format: int64
          example: 300
        inventory:
          $ref: '#/components/schemas/Inventory'
        trashQuantity:
          type: integer
          format: int64
          example: 30
        totalTrashCost:
          type: integer
          format: int64
          example: 3000
      xml:
        name: trash
        
    Customer:
      type: object
      properties:
        customerID:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: Tom Cruise
        contact:
          $ref: '#/components/schemas/Contact'
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
        
    Contact:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 15
        homePhone:
          type: integer
          format: int64
          example: 437302020
        businessPhone:
          type: integer
          format: int64
          example: 437302020
        landLine:
          type: integer
          format: int64
          example: 437302020
        businessEmail:
          type: string
          example: john@srijan.net
        personalEmail:
          type: string
          example: john@gmail.com
      xml:
        name: contact
        
    Address:
      type: object
      properties:
        addressID:
          type: integer
          format: int64
          example: 10
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
        
        
  securitySchemes:
    restaurant_store_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://localhost:5000/oauth/authorize
          scopes:
            write:user: modify users in your account
            read:user: read your users
    api_key:
      type: apiKey
      name: api_key
      in: header